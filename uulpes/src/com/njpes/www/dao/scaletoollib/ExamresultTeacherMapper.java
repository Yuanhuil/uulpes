package com.njpes.www.dao.scaletoollib;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.njpes.www.entity.baseinfo.District;
import com.njpes.www.entity.baseinfo.Role;
import com.njpes.www.entity.baseinfo.organization.Organization;
import com.njpes.www.entity.scaletoollib.ExamDoSchoolTask;
import com.njpes.www.entity.scaletoollib.ExamresultHuman;
import com.njpes.www.entity.scaletoollib.ExamresultTeacher;
import com.njpes.www.entity.scaletoollib.ExamresultTeacherWithBLOBs;
import com.njpes.www.entity.scaletoollib.QueryInfo;
import com.njpes.www.entity.scaletoollib.ReportLookTeacherFilterParam;
import com.njpes.www.entity.scaletoollib.ScaleInfo;
import com.njpes.www.entity.scaletoollib.StatExamResultTask;
import com.njpes.www.entity.scaletoollib.StatScope;
import com.njpes.www.entity.scaletoollib.TeacherExamAnswer;
import com.njpes.www.utils.PageParameter;

import edutec.scale.model.Scale;

public interface ExamresultTeacherMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_teacher
     *
     * @mbggenerated Sat Mar 21 23:18:41 CST 2015
     */
    int deleteByPrimaryKey(Long id);

    int deleteBatch(String[] ids);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_teacher
     *
     * @mbggenerated Sat Mar 21 23:18:41 CST 2015
     */
    int insert(ExamresultTeacherWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_teacher
     *
     * @mbggenerated Sat Mar 21 23:18:41 CST 2015
     */
    int insertSelective(ExamresultTeacherWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_teacher
     *
     * @mbggenerated Sat Mar 21 23:18:41 CST 2015
     */
    ExamresultTeacherWithBLOBs selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_teacher
     *
     * @mbggenerated Sat Mar 21 23:18:41 CST 2015
     */
    int updateByPrimaryKeySelective(ExamresultTeacherWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_teacher
     *
     * @mbggenerated Sat Mar 21 23:18:41 CST 2015
     */
    int updateByPrimaryKeyWithBLOBs(ExamresultTeacherWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_teacher
     *
     * @mbggenerated Sat Mar 21 23:18:41 CST 2015
     */
    int updateByPrimaryKey(ExamresultTeacher record);

    // 获取老师的报告
    public List<ExamresultTeacher> getTeacherResultByPage(
            @Param("reportLookTeacherFilterParam") ReportLookTeacherFilterParam reportLookTeacherFilterParam,
            @Param("page") PageParameter page);

    public List<ExamresultTeacher> getTeacherPersonalReportByPage(
            @Param("reportLookTeacherFilterParam") ReportLookTeacherFilterParam reportLookTeacherFilterParam,
            @Param("page") PageParameter page);

    public List<ExamresultTeacher> getTeaComplianceReportByPage(
            @Param("reportLookTeacherFilterParam") ReportLookTeacherFilterParam reportLookTeacherFilterParam,
            @Param("page") PageParameter page);

    public List<ExamresultTeacher> getTeaTeamReportsByPage(
            @Param("reportLookTeacherFilterParam") ReportLookTeacherFilterParam reportLookTeacherFilterParam,
            @Param("page") PageParameter page);

    public List<Map> getTeacherAnswerInSchool(Map param);

    public List<Map> getTeacherAnswerInEdu(Map param);

    public List<Scale> queryTeacherDistinctScales(@Param("org") Organization org);

    public List<ScaleInfo> getTeacherDistinctScales(@Param("org") Organization org,
            @Param("countyidOrSchoolid") String countyidOrSchoolid, @Param("roleid") int roleid,
            @Param("scaletype") int scaletype, @Param("scalesource") int scalesource,
            @Param("isSonSchool") boolean isSonSchool);

    public TeacherExamAnswer getTeacherAnswerByResultid(@Param("resultid") long resultid);

    public List<ExamresultTeacher> queryDistinctTeacherFromExamresultTeacher(@Param("orgId") int orgId);

    // 根据组织机构、年级和班级获得学生的测评结果，统计用
    public List<ExamresultHuman> getTeacherResult(StatScope scope);

    public List<ExamresultHuman> getTeacherResultsByTaskId(@Param("scope") StatScope scope,
            @Param("taskid") String taskid);

    public List<ScaleInfo> QueryScaleList(@Param("param") QueryInfo param);

    public List<StatExamResultTask> getTeacherResultByTask(@Param("scope") StatScope scope,
            @Param("typeid") String typeid);

    public List<ScaleInfo> getScaleListByTypeAndScope(@Param("scaletype") int scaletype,
            @Param("scope") StatScope scope);

    public List<Integer> getScaleTypeByScope(@Param("scope") StatScope scope);

    public List<District> selectDistinctQuxianFromExamresultTeacher();

    public List<Organization> selectDistinctSubSchoolFromExamresultTeacher();

    public List<Role> selectDistinctRoleFromExamresultTeacher(@Param("org") Organization org);

    public List<Role> getDistinctRoleFromExamresultTeacher(@Param("org") Organization org,
            @Param("countyidOrSchoolid") String countyidOrSchoolid, @Param("isSonSchool") boolean isSonSchool);

    public List<Organization> getSchoolsFromExamresultTeacher(@Param("countyid") String countyid);

    public List<ExamDoSchoolTask> getTaskTimesByTypeAndScope(@Param("scope") StatScope scope);
}