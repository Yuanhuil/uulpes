package com.njpes.www.dao.scaletoollib;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.njpes.www.entity.baseinfo.District;
import com.njpes.www.entity.baseinfo.organization.Organization;
import com.njpes.www.entity.scaletoollib.ExamDoSchoolTask;
import com.njpes.www.entity.scaletoollib.ExamresultHuman;
import com.njpes.www.entity.scaletoollib.ExamresultStudent;
import com.njpes.www.entity.scaletoollib.ExamresultStudentWithBLOBs;
import com.njpes.www.entity.scaletoollib.ExamresultStudentWithBackGround;
import com.njpes.www.entity.scaletoollib.QueryInfo;
import com.njpes.www.entity.scaletoollib.ReportLookStudentFilterParam;
import com.njpes.www.entity.scaletoollib.ScaleInfo;
import com.njpes.www.entity.scaletoollib.StatExamResultTask;
import com.njpes.www.entity.scaletoollib.StatScope;
import com.njpes.www.entity.scaletoollib.StudentExamAnswer;
import com.njpes.www.utils.PageParameter;

import edutec.scale.model.Scale;

public interface ExamresultStudentMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_student
     *
     * @mbggenerated Sat Mar 21 23:18:25 CST 2015
     */
    int deleteByPrimaryKey(Long id);

    int deleteBatch(String[] ids);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_student
     *
     * @mbggenerated Sat Mar 21 23:18:25 CST 2015
     */
    int insert(ExamresultStudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_student
     *
     * @mbggenerated Sat Mar 21 23:18:25 CST 2015
     */
    int insertSelective(ExamresultStudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_student
     *
     * @mbggenerated Sat Mar 21 23:18:25 CST 2015
     */
    ExamresultStudentWithBLOBs selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_student
     *
     * @mbggenerated Sat Mar 21 23:18:25 CST 2015
     */
    int updateByPrimaryKeySelective(ExamresultStudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_student
     *
     * @mbggenerated Sat Mar 21 23:18:25 CST 2015
     */
    int updateByPrimaryKeyWithBLOBs(ExamresultStudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examresult_student
     *
     * @mbggenerated Sat Mar 21 23:18:25 CST 2015
     */
    int updateByPrimaryKey(ExamresultStudent record);

    // 获取学生报告
    public List<ExamresultStudentWithBackGround> getStudentResultByPage(
            @Param("reportLookStudentFilterParam") ReportLookStudentFilterParam reportLookStudentFilterParam,
            @Param("page") PageParameter page);

    // 根据组织机构、年级和班级获得学生的测评结果，统计用
    public List<ExamresultHuman> getStudentResult(StatScope scope);

    public List<ExamresultStudent> getStuPersonalReportByPage(@Param("page") PageParameter page,
            @Param("reportLookStudentFilterParam") ReportLookStudentFilterParam reportLookStudentFilterParam);

    public List<ExamresultStudentWithBackGround> getStuComplianceReportByPage(@Param("page") PageParameter page,
            @Param("reportLookStudentFilterParam") ReportLookStudentFilterParam reportLookStudentFilterParam);

    public List<ExamresultStudent> getStuPersonalCommentsByPage(@Param("page") PageParameter page,
            @Param("reportLookStudentFilterParam") ReportLookStudentFilterParam reportLookStudentFilterParam);

    // public List<ExamresultStudent> getStuTeamReportByPage(@Param("page")
    // PageParameter page,@Param("reportLookStudentFilterParam")
    // ReportLookStudentFilterParam reportLookStudentFilterParam);

    // public List<StudentExamAnswer> getStudentAnswerInSchool(Map param);
    public List<Map> getStudentAnswerInSchool(Map param);

    public List<Map> getStudentMhAnswerInSchool(Map param);

    public List<Map> getStudentAnswerInEdu(Map param);

    public List<Map> getStudentAnswerInCityEdu(Map param);

    public List<Map> getStudentAnswerInCountyEdu(Map param);

    public List<Map> getStudentMhAnswerInEdu(Map param);

    public StudentExamAnswer getStudentAnswerByBjid(Map param);

    public StudentExamAnswer getStudentAnswerByNj(Map param);

    public StudentExamAnswer getStudentAnswerByResultid(@Param("resultid") long resultid);

    // ss
    public List<District> selectDistinctQuxianFromExamresultStudent();

    public List<ExamresultStudent> queryDistinctXDFromExamresultStudent(@Param("orgId") int orgId);

    public List<ExamresultStudent> queryDistinctNJFromExamresultStudent(@Param("org") Organization org,
            @Param("xdId") int xdId, @Param("isSonSchool") boolean isSonSchool);

    public List<ExamresultStudent> queryDistinctNJByCountyidOrSchoolid(@Param("org") Organization org,
            @Param("id") String id, @Param("xdId") int xdId, @Param("isSonSchool") boolean isSonSchool);

    public List<ExamresultStudent> queryDistinctNJFromExamresultStudentAccordingOrgId(@Param("orgId") int orgId);

    public List<ExamresultStudent> queryDistinctBJFromExamresultStudent(@Param("orgId") int orgId,
            @Param("xdId") int xdId, @Param("njId") int njId);

    public List<ExamresultStudent> queryBJFromExamresultStudentByGrade(@Param("orgId") int orgId,
            @Param("xdId") int xdId, @Param("grade") int grade);

    public List<ExamresultStudent> queryDistinctBJFromExamresultStudentByNJ(@Param("orgId") int orgId,
            @Param("njmc") String njmc);

    public List<Scale> queryDistinctScales(@Param("org") Organization org);

    public List<Scale> queryDistinctScalesInSchool(@Param("org") Organization org,
            @Param("reportLookStudentFilterParam") ReportLookStudentFilterParam reportLookStudentFilterParam);

    public List<Scale> queryDistinctScalesInCounty(@Param("countyid") String countyid,
            @Param("reportLookStudentFilterParam") ReportLookStudentFilterParam reportLookStudentFilterParam);

    public List<Scale> queryDistinctScalesInCity(@Param("cityid") String cityid, @Param("xzxs") String xzxs,
            @Param("reportLookStudentFilterParam") ReportLookStudentFilterParam reportLookStudentFilterParam);

    public List<String> querySchoolsFromExamresult(@Param("countyid") String countyid);

    public List<StatExamResultTask> getStudentResultByTask(@Param("scope") StatScope scope,
            @Param("typeid") String typeid);

    public List<ExamresultHuman> getStudentResultsByTaskId(@Param("scope") StatScope scope,
            @Param("taskid") String taskid);

    public List<ScaleInfo> QueryScaleList(@Param("param") QueryInfo param);

    public List<ScaleInfo> getScaleListByTypeAndScope(@Param("scaletype") int scaletype,
            @Param("scope") StatScope scope);

    public List<ExamDoSchoolTask> getTaskTimesByTypeAndScope(@Param("scope") StatScope scope);

    public List<Integer> getScaleTypeByScope(@Param("scope") StatScope scope);

    public List<Organization> getSchoolsFromExamresultStudent(@Param("countyid") String countyid);

    public List<ScaleInfo> queryScaleFromExamresultStudentInSchool(Map param);

    public List<ScaleInfo> queryEduScaleFromExamresultStudent(@Param("org") Organization org, @Param("xd") int xd,
            @Param("nj") int nj, @Param("scaletype") int scaletype, @Param("scalesource") int scalesource,
            @Param("isSonSchool") boolean isSonSchool);

    public List<ScaleInfo> queryEduScaleByCountyidOrSchoolid(@Param("org") Organization org,
            @Param("countyidOrSchoolid") String countyidOrSchoolid, @Param("xd") int xd, @Param("nj") int nj,
            @Param("scaletype") int scaletype, @Param("scalesource") int scalesource,
            @Param("isSonSchool") boolean isSonSchool);

	List<Map> getStudentAllResult(Map<?, ?> param);

}
