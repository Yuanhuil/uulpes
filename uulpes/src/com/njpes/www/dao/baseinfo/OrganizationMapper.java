package com.njpes.www.dao.baseinfo;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import com.njpes.www.entity.baseinfo.organization.Organization;
import com.njpes.www.entity.util.Dictionary;
import com.njpes.www.utils.PageParameter;

public interface OrganizationMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table organization
     * 
     * @mbggenerated Sat May 09 20:41:44 CST 2015
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table organization
     * 
     * @mbggenerated Sat May 09 20:41:44 CST 2015
     */
    int insert(Organization record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table organization
     * 
     * @mbggenerated Sat May 09 20:41:44 CST 2015
     */
    int insertSelective(Organization record);

    // 史斌增加批量插入
    int insertBatch(List<Organization> orgs);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table organization
     * 
     * @mbggenerated Sat May 09 20:41:44 CST 2015
     */
    Organization selectByPrimaryKey(Long id);

    List<Organization> selectByName(String name);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table organization
     * 
     * @mbggenerated Sat May 09 20:41:44 CST 2015
     */
    int updateByPrimaryKeySelective(Organization record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table organization
     * 
     * @mbggenerated Sat May 09 20:41:44 CST 2015
     */
    int updateByPrimaryKey(Organization record);

    /**
     * 批量插入
     * 
     * @param orgs
     * @return
     */
    int updateBatch(List<Organization> orgs);

    public List<Organization> selectAllOrganizations();

    /**
     * 查看下属单位信息
     * 
     * @param 传参数查询信息
     * @param page
     *            分页参数
     * @return 查询结果列表
     * @author 赵忠诚
     */
    public List<Organization> selectSubOrgsByWebQueryPage(@Param("org") Organization org,
            @Param("page") PageParameter page);

    /**
     * 根据单位id查找下属单位信息
     * 
     * @param 单位id
     * @param page
     *            分页参数
     * @return 查询结果列表
     * @author 赵忠诚
     */
    public List<Organization> selectSubOrgsByOrgidPage(@Param("orgid") long orgid, @Param("page") PageParameter page);

    /**
     * 根据单位id查找下属信息,如果type参数为空，则查询所有信息
     * 
     * @param 单位id
     * @param type
     *            {@link com.njpes.www.entity.baseinfo.enums.OrganizationType}
     * @return 查询结果列表
     * @author 赵忠诚
     */
    public List<Organization> selectSubOrgsByType(@Param("orgid") long orgid, @Param("orgtype") String type);

    /**
     * 根据单位id查找直接儿子节点信息,如果type参数为空，则查询所有信息
     * 
     * @param 单位id
     * @param type
     *            {@link com.njpes.www.entity.baseinfo.enums.OrganizationType}
     * @return 查询结果列表
     * @author 赵忠诚
     */
    public List<Organization> selectSonSubOrgsByType(@Param("orgid") long orgid, @Param("orgtype") String type);

    public List<Organization> getQuxianAndSchoolsOrgs(@Param("orgid") long orgid);

    /**
     * 根据单位id查找直接儿子节点信息
     * 
     * @param 单位id
     * @param orglevel
     * @return 查询结果列表
     * @author 赵忠诚
     */
    public List<Organization> selectSonSubOrgsByOrgLevel(@Param("orgid") long orgid, @Param("orglevel") int orglevel);

    /**
     * 获取所有的学校 赵忠诚
     */
    public List<Organization> selectAllSchools();

    /**
     * 获取所有的教委 赵忠诚
     */
    public List<Organization> selectAllEcs();

    /**
     * 获取父亲节点信息
     * 
     * @param currentid
     * @return 组织机构信息
     */
    public Organization findParent(@Param("orgid") Long currentid);

    /**
     * 根据行政区id获得该行政区教委
     * 
     * @param areaid
     * @return
     */
    public List<Organization> getEduOrganizationByCityId(String areaid);

    public Organization getEduOrganizationByCountyId(String areaid);

    public Organization getEduOrganizationByTownId(String areaid);

    /**
     * 根据区县id集合号获得所有县所有的学校
     * 
     * @param countyids
     * @return
     */
    public List<Organization> getSchoolOrgByCountyIds(List countyids);

    /**
     * 根据市id集合号获得所有县所有的学校（不包括直属学校）
     * 
     * @param countyids
     * @return
     */
    public List<Organization> getSchoolOrgByCityIds(@Param("cityids") String cityids);

    /**
     * 根据乡镇id号获得学校
     * 
     * @param areaid
     * @return
     */
    public List<Organization> getSchoolOrgByTownId(String areaid);

    /**
     * 根据组织机构层级获得行政区划列表
     * 
     * @author s
     * @param level
     *            组织机构层级
     */
    public List<Dictionary> getDistsByOrgLevel(int level);

    /**
     * 根据区县id获得学校
     * 
     * @author s
     */
    public List<Organization> getSchoolOrgByCountyId(String countyid);

    /**
     * 根据城市id获得学校
     * 
     * @author s
     */
    public List<Organization> getSchoolOrgByCityId(String cityid);

    /**
     * 根据城市获得区县的列表
     * 
     * @author s
     */
    public List<Organization> getCountiesByCity(String cityid);

    /**
     * 根据区县获得乡镇的列表
     * 
     * @author s
     */
    public List<Organization> getTownsByCounty(String countyid);

    /**
     * 根据code获得组织机构
     * 
     * @param code
     * @return
     */
    public List<Organization> getOrgByCode(String code);

    long getMaxId();

    public int updateLocked(@Param("orgid") Long orgid, @Param("locked") String locked);

}