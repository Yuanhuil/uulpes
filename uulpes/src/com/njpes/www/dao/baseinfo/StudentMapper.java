package com.njpes.www.dao.baseinfo;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.njpes.www.entity.baseinfo.AccountDetail;
import com.njpes.www.entity.baseinfo.Student;
import com.njpes.www.entity.baseinfo.StudentWithBLOBs;
import com.njpes.www.entity.scaletoollib.StatHuman;
import com.njpes.www.entity.scaletoollib.StatScope;
import com.njpes.www.utils.PageParameter;

public interface StudentMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table student
     *
     * @mbggenerated Fri May 01 17:08:16 CST 2015
     */
    int deleteByPrimaryKey(Long id);

    int changeClass(@Param("id") Long id, @Param("newclassid") int newclassid);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table student
     *
     * @mbggenerated Fri May 01 17:08:16 CST 2015
     */
    int insert(StudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table student
     *
     * @mbggenerated Fri May 01 17:08:16 CST 2015
     */
    int insertSelective(StudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table student
     *
     * @mbggenerated Fri May 01 17:08:16 CST 2015
     */
    StudentWithBLOBs selectByPrimaryKey(Long id);

    StudentWithBLOBs getStudentByAccountId(Long id);

    StudentWithBLOBs selectStudentWithBlobInfoById(Long id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table student
     *
     * @mbggenerated Fri May 01 17:08:16 CST 2015
     */
    int updateByPrimaryKeySelective(StudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table student
     *
     * @mbggenerated Fri May 01 17:08:16 CST 2015
     */
    int updateByPrimaryKeyWithBLOBs(StudentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table student
     *
     * @mbggenerated Fri May 01 17:08:16 CST 2015
     */
    int updateByPrimaryKey(Student record);

    int updateStudentBjxx(StudentWithBLOBs record);

    AccountDetail selectByAccountId(int accountId);

    void updateByAccountId(AccountDetail accountDetail);

    List<StudentWithBLOBs> getStudents(Map param);

    List<Integer> getStudentIds(Map param);

    List<Map> getBasicStudents(Map param);

    Map getBzrAndParentIdByStudentid(@Param("studentid") long studentid);

    /**
     * 分页获得信息
     *
     * @author 赵忠诚
     */
    List<StudentWithBLOBs> getStudentsByPage(@Param("student") Student stu, @Param("orgid") long schoolorgid,
            @Param("page") PageParameter page, @Param("excludesids") List<Long> excludesids,
            @Param("flozenflag") int flozenflag);

    // 获得毕业班学生信息
    List<StudentWithBLOBs> getGraduatedStudentsByPage(@Param("student") Student stu, @Param("orgid") long schoolorgid,
            @Param("page") PageParameter page, @Param("excludesids") List<Long> excludesids,
            @Param("flozenflag") int flozenflag);

    /**
     * 不分页获得信息
     *
     * @author 赵忠诚
     */
    List<StudentWithBLOBs> getStudentsAll(@Param("student") Student stu, @Param("orgid") long schoolorgid,
            @Param("excludesids") List<Long> excludesids, @Param("flozenflag") int flozenflag);

    public int getStudentsXjh(@Param("orgid") long schoolorgid,@Param("xjh") String xjh);

    List<StudentWithBLOBs> getStudentsInCounty(@Param("student") Student stu, @Param("countyid") String countyid,
            @Param("flozenflag") int flozenflag);

    List<StudentWithBLOBs> getStudentsInCity(@Param("student") Student stu, @Param("cityid") String cityid,
            @Param("xzxs") String xzxs, @Param("flozenflag") int flozenflag);

    /**
     * 根据统计对象范围获得所有学生信息
     *
     * @author s
     * @param scope
     * @return
     */
    List<StatHuman> getStudentsByStatscope(@Param("scope") StatScope scope);

    /**
     * @author 赵忠诚
     */
    List<StudentWithBLOBs> getStudentsByids(@Param("ids") List<Long> ids);

    /**
     * @author 赵忠诚
     */
    StudentWithBLOBs getStudentByid(@Param("studentid") long studentid);

    List<Student> getStudentsByClassId(@Param("bjid") long bjid);

    List<Student> getStudentsByGradeid(@Param("gradeid") long gradeid);

    /**
     * 得到某个班级的男女生人数
     */
    List<Map> getStudentCount(@Param("classid") int classid);

    Student getStudentByXh(@Param("orgid") long orgid, @Param("xh") String xh);

    Student getStudentBySfzjh(@Param("sfzjh") String sfzjh);

    Long insertBatch(List<StudentWithBLOBs> students);

    // 史斌增加批量更新
    int updateBatch(List<StudentWithBLOBs> students);

    List<Student> getStudentsRecordAll(@Param("student") Student stu, @Param("orgid") long schoolorgid,@Param("flozenflag") int flozenflag);
}