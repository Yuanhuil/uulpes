package com.njpes.www.dao.assessmentcenter;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.njpes.www.entity.assessmentcenter.DataManageFilterParam;
import com.njpes.www.entity.assessmentcenter.Examdo;
import com.njpes.www.entity.assessmentcenter.ExamdoKey;
import com.njpes.www.entity.baseinfo.District;
import com.njpes.www.entity.baseinfo.Role;
import com.njpes.www.entity.baseinfo.organization.Grade;
import com.njpes.www.entity.baseinfo.organization.Organization;
import com.njpes.www.entity.scaletoollib.ExamdoStudent;
import com.njpes.www.entity.scaletoollib.ExamdoTeacher;
import com.njpes.www.entity.scaletoollib.ScaleInfo;
import com.njpes.www.utils.PageParameter;

import edutec.scale.model.Scale;

public interface ExamdoMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examdo_student
     *
     * @mbggenerated Sun May 17 15:42:20 CST 2015
     */
    int deleteByPrimaryKey(ExamdoKey key);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examdo_student
     *
     * @mbggenerated Sun May 17 15:42:20 CST 2015
     */
    int insert(Examdo record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examdo_student
     *
     * @mbggenerated Sun May 17 15:42:20 CST 2015
     */
    int insertSelective(Examdo record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examdo_student
     *
     * @mbggenerated Sun May 17 15:42:20 CST 2015
     */
    Examdo selectByPrimaryKey(ExamdoKey key);

    /**
     * 根据用户id获得所有未做的心理测试
     * 
     * @author shibin
     * @param para
     * @return
     */
    List selectByUserId(Map para);

    ExamdoStudent selectStudentExamdoByResultId(long resultid);

    ExamdoTeacher selectTeacherExamdoByResultId(long resultid);

    List<ExamdoStudent> selectStudentExamdoByStudentId(Map param);

    List<ExamdoTeacher> selectTeacherExamdoByTeacherId(Map param);

    List queryStudentExamdo(@Param("dmgFilterParam") DataManageFilterParam dmgFilterParam);

    List queryTeacherExamdo(@Param("dmgFilterParam") DataManageFilterParam dmgFilterParam);

    List queryStudentExamdoByPage(@Param("page") PageParameter page,
            @Param("dmgFilterParam") DataManageFilterParam dmgFilterParam);

    List queryTeacherExamdoByPage(@Param("page") PageParameter page,
            @Param("dmgFilterParam") DataManageFilterParam dmgFilterParam);

    public List<Scale> queryStudentDistinctScales(@Param("org") Organization org);

    public List<Scale> queryTeacherDistinctScales(@Param("org") Organization org);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examdo_student
     *
     * @mbggenerated Sun May 17 15:42:20 CST 2015
     */
    int updateByPrimaryKeySelective(Examdo record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table examdo_student
     *
     * @mbggenerated Sun May 17 15:42:20 CST 2015
     */
    int updateByPrimaryKey(Examdo record);

    int setStudentOkTime(Map param);

    int setTeacherOkTime(Map param);

    List<ScaleInfo> selectDistinctScaleAcorStype(@Param("org") Organization org, @Param("gradeid") String gradeid,
            @Param("bjid") String bjid, @Param("typeid") int typeid);

    List<ScaleInfo> selectDistinctScaleBySource(@Param("org") Organization org, @Param("gradeid") String gradeid,
            @Param("bjid") String bjid, @Param("sourceid") int sourceid);

    List<ScaleInfo> selectDistinctScales(@Param("org") Organization org, @Param("gradeid") String gradeid,
            @Param("bjid") String bjid, @Param("typeid") int typeid, @Param("sourceid") int sourceid);

    List<ScaleInfo> selectTchDistinctScaleAcorStype(@Param("org") Organization org, @Param("roleid") String roleid,
            @Param("typeid") int typeid);

    List<ScaleInfo> selectTchDistinctScaleBySource(@Param("org") Organization org, @Param("roleid") String roleid,
            @Param("sourceid") int sourceid);

    List<ScaleInfo> selectTchDistinctScales(@Param("org") Organization org, @Param("roleid") String roleid,
            @Param("typeid") int typeid, @Param("sourceid") int sourceid);

    List<ScaleInfo> selectDistinctScaleByRoleId(@Param("org") Organization org, @Param("roleid") String roleid);

    List<ScaleInfo> selectDistinctScaleByGradeId(@Param("org") Organization org, @Param("gradeid") String gradeid,
            @Param("bjid") String bjid);

    List<District> selectStudentDistinctQuxian();

    List<District> selectTeacherDistinctQuxian();

    public List<Organization> selectStudentDistinctSonSchool();

    public List<Organization> selectTeacherDistinctSonSchool();

    public List<Grade> getStudentDistinctGradeInCounty(@Param("countyid") String countyid);

    public List<ScaleInfo> getStudentDistinctScaleInCounty(@Param("countyid") String countyid);

    public List<ScaleInfo> getStudentDistinctScaleInCountyByGrade(@Param("countyid") String countyid,
            @Param("gradeid") String gradeid);

    public List<Role> getTeacherDistinctRoleInCounty(@Param("countyid") String countyid);

    public List<ScaleInfo> getTeacherDistinctScaleInCounty(@Param("countyid") String countyid);

    public List<Grade> getStudentDistinctGradeInSchool(@Param("schoolid") String schoolid);

    public List<ScaleInfo> getStudentDistinctScaleInSchool(@Param("schoolid") String schoolid,
            @Param("gradeid") String gradeid);

    public List<Role> getTeacherDistinctRoleInSchool(@Param("schoolid") String schoolid);

    public List<ScaleInfo> getTeacherDistinctScaleInSchool(@Param("schoolid") String schoolid);
    // public List querySchoolsFromExamresult(@Param("countyid") String
    // countyid,@Param("typeflag") int typeflag);

	List<Examdo> getSchoolAllDataById(String schoolid);

}